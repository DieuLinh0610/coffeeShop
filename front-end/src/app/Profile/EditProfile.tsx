import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet, TouchableOpacity, Platform } from 'react-native';
import { useDispatch, useSelector } from 'react-redux';
import { useRouter } from 'expo-router';
import { setUser } from '@/src/redux/authSlice';
import Toast from 'react-native-toast-message';
import { updateUserAPI } from '@/src/apis/axios';
import { Calendar } from 'react-native-calendars';
export default function EditProfile() {
  const router = useRouter();
  const dispatch = useDispatch();
  const currentUser = useSelector((state: any) => state.auth.user);

  const [name, setName] = useState(currentUser?.userName || '');
  const [phone, setPhone] = useState(currentUser?.phoneNumber || '');
  const [location, setLocation] = useState(currentUser?.location || '');
  const [dateOfBirth, setDateOfBirth] = useState<string>(currentUser?.dateOfBirth || '');
  const [gender, setGender] = useState(currentUser?.gender ? 'male' : 'female');
  const [open, setOpen] = useState(false);
  const [showCalendar, setShowCalendar] = useState(false);

  const handleSave = async () => {
    try {
      const updatedData = { name, phone, location, dateOfBirth, gender: gender === 'male' };
      console.log("üü¢ D·ªØ li·ªáu g·ª≠i l√™n API:", updatedData); 
      const response = await updateUserAPI(currentUser.id, updatedData);
      console.log("üü¢ Ph·∫£n h·ªìi t·ª´ API:", response);
      if (response.status === 200) {
        dispatch(setUser({ ...currentUser, ...updatedData }));
        Toast.show({
          type: 'success',
          text1: 'Th√†nh c√¥ng',
          text2: 'Th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!',
        });
        router.back();
      }
    } catch (error) {
      console.error("üî¥ L·ªói API:", error);
      Toast.show({
        type: 'error',
        text1: 'L·ªói',
        text2: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin. H√£y th·ª≠ l·∫°i sau.',
      });
      console.error(error);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.label}>H·ªç v√† T√™n:</Text>
      <TextInput style={styles.input} value={name} onChangeText={setName} />

      <Text style={styles.label}>S·ªë ƒëi·ªán tho·∫°i:</Text>
      <TextInput style={styles.input} value={phone} onChangeText={setPhone} keyboardType="phone-pad" />

      <Text style={styles.label}>ƒê·ªãa ch·ªâ:</Text>
      <TextInput style={styles.input} value={location} onChangeText={setLocation} />

       <Text style={styles.label}>Ng√†y sinh:</Text>

      {/* N√∫t b·∫•m ƒë·ªÉ m·ªü l·ªãch */}
      <TouchableOpacity style={styles.dateButton} onPress={() => setShowCalendar(!showCalendar)}>
      <Text style={styles.dateText}>
  {dateOfBirth ? dateOfBirth.toString().split('T')[0] : 'Ch·ªçn ng√†y sinh'}
</Text>

      </TouchableOpacity>

      {/* Hi·ªÉn th·ªã l·ªãch khi b·∫•m v√†o n√∫t */}
      {showCalendar && (
        <Calendar
        onDayPress={(day) => {
          setDateOfBirth(day.dateString); // ƒê√£ l√† string n√™n kh√¥ng l·ªói
          setShowCalendar(false);
        }}
          markedDates={{
            [dateOfBirth]: { selected: true, marked: true, selectedColor: '#6F4F1F' },
          }}
        />
      )}

      <Text style={styles.label}>Gi·ªõi t√≠nh:</Text>
      <View style={styles.genderContainer}>
      <TouchableOpacity
    style={[styles.genderButton, gender === 'male' && styles.selectedGender]}
    onPress={() => setGender('male')}
  >
    <Text style={[styles.genderText, gender === 'male' && styles.selectedText]}>Nam</Text>
  </TouchableOpacity>

  <TouchableOpacity
    style={[styles.genderButton, gender === 'female' && styles.selectedGender]}
    onPress={() => setGender('female')}
  >
    <Text style={[styles.genderText, gender === 'female' && styles.selectedText]}>N·ªØ</Text>
  </TouchableOpacity>
      </View>

      <Button title="L∆∞u" onPress={handleSave} color="#6F4F1F" />
      <Toast />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#F5F5F5',
  },
  label: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginTop: 10,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    padding: 10,
    backgroundColor: '#fff',
    marginBottom: 10,
  },
  
  dateButton: {
    backgroundColor: '#6F4F1F',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 10,
  },
  dateText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  genderContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginVertical: 10,
  },
  genderButton: {
    flex: 1,
    padding: 12,
    borderWidth: 1,
    borderColor: '#ccc',
    alignItems: 'center',
    marginHorizontal: 5,
    backgroundColor: '#fff',
    borderRadius: 100
  },
  selectedGender: {
    backgroundColor: '#6F4F1F',
  },
  genderText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  selectedText: {
    color: '#fff',
  },
  saveButton: {
    backgroundColor: '#6F4F1F',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    width: '100%',  // ƒê·∫£m b·∫£o n√∫t full chi·ªÅu r·ªông
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

